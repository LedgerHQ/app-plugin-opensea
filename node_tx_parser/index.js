// WORKING
// import * as test from 'ethers'
// console.log(test.default.ethers.utils.RLP)

// WORKING
import ethers from "ethers"
console.log('youpi', ethers.utils.RLP)
const RLP = ethers.utils.RLP

// const parseUnits = ethers.utils.parseUnits
// const parseEther = ethers.utils.parseEther

// const RANDOM_ADDRESS = '0xaaaabbbbccccddddeeeeffffgggghhhhiiiijjjj'

// let genericTx = {
// 	nonce: Number(0),
// 	gasLimit: Number(21000),
// 	gasPrice: parseUnits('1', 'gwei'),
// 	value: parseEther('1'),
// 	chainId: 1,
// 	to: RANDOM_ADDRESS,
// 	data: null,
// };

function txFromEtherscan(rawTx) {
	// Remove 0x prefix
	rawTx = rawTx.slice(2);

	let txType = rawTx.slice(0, 2);
	if (txType == "02" || txType == "01") {
		// Remove "02" prefix
		rawTx = rawTx.slice(2);
	} else {
		txType = "";
	}

	let decoded = RLP.decode("0x" + rawTx);
	if (txType != "") {
		decoded = decoded.slice(0, decoded.length - 3); // remove v, r, s
	} else {
		decoded[decoded.length - 1] = "0x"; // empty
		decoded[decoded.length - 2] = "0x"; // empty
		decoded[decoded.length - 3] = "0x01"; // chainID 1
	}

	// Encode back the data, drop the '0x' prefix
	let encoded = RLP.encode(decoded).slice(2);

	// Don't forget to prepend the txtype
	return txType + encoded;
}

const rawTx = '0x02f87001138459682f0085103743e1af8307e31394a5409ec958c83c3f309868babaca7c86dcb077c18084ddd81f82c001a0ac03b62363de842c8afe05d632ab797f2c4d4dadca670586a2ec9515f97d6379a004b94348bb042f63b4581d8e2a3c03058c5f3f67d9d4e80d36fd6b73c54e48be'
const cancelOrderTx = '0x02f90514018202c68459682f00851968d2107c830124a2947be8076f4ea4a4ad08075c2508e481d6c946d12b80b904a4a8a41c700000000000000000000000007be8076f4ea4a4ad08075c2508e481d6c946d12b000000000000000000000000dd21baa82528e251b24f8d10493b14eb7690b2d200000000000000000000000000000000000000000000000000000000000000000000000000000000000000005b3256965e7c3cf26e11fcaf296dfc8807c010730000000000000000000000007645eec8bb51862a5aa855c40971b2877dae81af0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002ee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004563918244f4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000061224b640000000000000000000000000000000000000000000000000000000000000000c1a08f2a055c6bb246a55042670f2d496bb2249210db179dcc7358b4090666b30000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000003e00000000000000000000000000000000000000000000000000000000000000480000000000000000000000000000000000000000000000000000000000000001bbb51a20a1210483592e0bf92c61e111fc8f44f17d27bb25184fed5005d8b2a0c1ced75e3b1b29e16f6a830c9680cb0d41b5ac84e07be88518d2f1a5006f25461000000000000000000000000000000000000000000000000000000000000006423b872dd000000000000000000000000dd21baa82528e251b24f8d10493b14eb7690b2d2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004e5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c001a0ede1b1154544155ff4d9a6edf8a0b66b205fa4bc61c826fe097d2f4f16613327a0112d9ed8838285a5895cdadca800aa846f6304b5a55c99da4687ce781ff6d704'
const target = 'E004000040048000002C8000003C800000000000000002ED01138459682F0085103743E1AF8307E31394A5409EC958C83C3F309868BABACA7C86DCB077C18084DDD81F82C0'

const first_apdu_trailing = '048000002C8000003C8000000000000000'

const parsed = txFromEtherscan(rawTx).toUpperCase()
const len = `${first_apdu_trailing}${parsed}`.length / 2
const hexLen = len.toString(16)
console.log(len.toString(16))

const trailingFirst = `E0040000${hexLen}048000002C8000003C8000000000000000`
const trailingBetween = `E004800096`
// const trailingLast = `E004000` + len + data

const generated = txFromEtherscan(rawTx).toUpperCase()
const firstAPDU = trailingFirst + generated

console.log('result:', firstAPDU)
console.log('target:', target)
console.log('are equal ?', firstAPDU === target)
