"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.DEFAULT_VNC_PORT = exports.DEFAULT_APP_PATH = exports.BOLOS_SDK = exports.DEV_CERT_PRIVATE_KEY = void 0;
/** ******************************************************************************
 *  (c) 2020 Zondax GmbH
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 ******************************************************************************* */
var path = require('path');
var Docker = require('dockerode');
exports.DEV_CERT_PRIVATE_KEY = 'ff701d781f43ce106f72dc26a46b6a83e053b5d07bb3d4ceab79c91ca822a66b';
exports.BOLOS_SDK = '/project/deps/nanos-secure-sdk';
exports.DEFAULT_APP_PATH = '/project/app/bin';
exports.DEFAULT_VNC_PORT = '8001';
var EmuContainer = /** @class */ (function () {
    function EmuContainer(elfLocalPath, libElfs, image, name) {
        // eslint-disable-next-line global-require
        this.image = image;
        this.elfLocalPath = elfLocalPath;
        this.libElfs = libElfs;
        this.name = name;
        this.logging = false;
        this.startDelay = 100;
    }
    EmuContainer.prototype.log = function (message) {
        var _a;
        if ((_a = this.logging) !== null && _a !== void 0 ? _a : false) {
            process.stdout.write(message + "\n");
        }
    };
    EmuContainer.killContainerByName = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var docker;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        docker = new Docker();
                        return [4 /*yield*/, new Promise(function (resolve) {
                                docker.listContainers({ all: true, filters: { name: [name] } }, function (err, containers) {
                                    containers.forEach(function (containerInfo) {
                                        docker.getContainer(containerInfo.Id).remove({ force: true }, function () {
                                            // console.log("container removed");
                                        });
                                    });
                                    return resolve(true);
                                });
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    EmuContainer.checkAndPullImage = function (imageName) {
        return __awaiter(this, void 0, void 0, function () {
            var docker;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        docker = new Docker();
                        return [4 /*yield*/, new Promise(function (resolve) {
                                docker.pull(imageName, function (err, stream) {
                                    docker.modem.followProgress(stream, onFinished, onProgress);
                                    function onProgress(event) {
                                        // eslint-disable-next-line no-prototype-builtins
                                        var progress = event.hasOwnProperty('progress') ? event.progress : '';
                                        // eslint-disable-next-line no-prototype-builtins
                                        var status = event.hasOwnProperty('status') ? event.status : '';
                                        process.stdout.write("[DOCKER] " + status + ": " + progress + "\n");
                                    }
                                    function onFinished(err, output) {
                                        if (!err) {
                                            resolve(true);
                                        }
                                        else {
                                            console.log(err);
                                            process.exit(1);
                                        }
                                    }
                                });
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    EmuContainer.prototype.runContainer = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var docker, appFilename, appDir, dirBindings, libArgs, displaySetting, displayEnvironment, SDKoption, command, portBindings, environment, _a;
            var _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        docker = new Docker();
                        this.logging = options.logging;
                        this.startDelay = options.startDelay;
                        appFilename = path.basename(this.elfLocalPath);
                        appDir = path.dirname(this.elfLocalPath);
                        dirBindings = [appDir + ":" + exports.DEFAULT_APP_PATH];
                        libArgs = '';
                        Object.entries(this.libElfs).forEach(function (_a) {
                            var libName = _a[0], libPath = _a[1];
                            var libFilename = path.basename(libPath);
                            libArgs += " -l " + libName + ":" + exports.DEFAULT_APP_PATH + "/" + libFilename;
                        });
                        displaySetting = '--display headless';
                        displayEnvironment = '';
                        // Disable X11 in CI
                        if (!('CI' in process.env) || process.env.CI === 'false') {
                            if ('X11' in options && options.X11) {
                                displaySetting = '';
                                dirBindings.push('/tmp/.X11-unix:/tmp/.X11-unix:ro');
                            }
                            displayEnvironment = process.env.DISPLAY ? process.env.DISPLAY : displayEnvironment;
                            if (process.platform === 'darwin') {
                                displayEnvironment = 'host.docker.internal:0';
                            }
                        }
                        SDKoption = '';
                        if (options.model === 'nanos') {
                            this.log("[ZEMU] Using NanoS SDK 2.0");
                            SDKoption = ' -k 2.0 ';
                        }
                        command = "/home/zondax/speculos/speculos.py --color LAGOON_BLUE " + displaySetting + " " + options.custom + " -m " + options.model + " " + SDKoption + " --vnc-port " + exports.DEFAULT_VNC_PORT + " " + exports.DEFAULT_APP_PATH + "/" + appFilename + " " + libArgs;
                        this.log("[ZEMU] Command: " + command);
                        portBindings = (_b = {},
                            _b["1234/tcp"] = [{ HostPort: '1234' }],
                            _b["8001/tcp"] = [{ HostPort: '8001' }],
                            _b["9997/tcp"] = [{ HostPort: '9997' }],
                            _b["9998/tcp"] = [{ HostPort: '9998' }],
                            _b["9999/tcp"] = [{ HostPort: '9999' }],
                            _b);
                        environment = [
                            "SCP_PRIVKEY=" + exports.DEV_CERT_PRIVATE_KEY,
                            "BOLOS_SDK=" + exports.BOLOS_SDK,
                            "BOLOS_ENV=/opt/bolos",
                            "DISPLAY=" + displayEnvironment,
                        ];
                        this.log("[ZEMU] Creating Container");
                        _a = this;
                        return [4 /*yield*/, docker.createContainer({
                                Image: this.image,
                                name: this.name,
                                Tty: true,
                                Privileged: true,
                                AttachStdout: true,
                                AttachStderr: true,
                                User: '1000',
                                Env: environment,
                                PortBindings: portBindings,
                                Binds: dirBindings,
                                Cmd: [command]
                            })];
                    case 1:
                        _a.currentContainer = _c.sent();
                        this.log("[ZEMU] Connected " + this.currentContainer.id);
                        if (this.logging) {
                            this.currentContainer.attach({ stream: true, stdout: true, stderr: true }, function (err, stream) {
                                stream.pipe(process.stdout);
                            });
                            this.log("[ZEMU] Attached " + this.currentContainer.id);
                        }
                        return [4 /*yield*/, this.currentContainer.start({})];
                    case 2:
                        _c.sent();
                        this.log("[ZEMU] Started " + this.currentContainer.id);
                        return [2 /*return*/];
                }
            });
        });
    };
    EmuContainer.prototype.stop = function () {
        return __awaiter(this, void 0, void 0, function () {
            var container;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.currentContainer) return [3 /*break*/, 3];
                        container = this.currentContainer;
                        this.currentContainer = null;
                        this.log("[ZEMU] Stopping container");
                        return [4 /*yield*/, container.stop({ t: 0 })];
                    case 1:
                        _a.sent();
                        this.log("[ZEMU] Stopped");
                        return [4 /*yield*/, container.remove()];
                    case 2:
                        _a.sent();
                        this.log("[ZEMU] Removed");
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return EmuContainer;
}());
exports["default"] = EmuContainer;
