/// <reference types="node" />
/** ******************************************************************************
 *  (c) 2020 Zondax GmbH
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 ******************************************************************************* */
import PNG from 'pngjs';
export declare const DEFAULT_START_OPTIONS: {
    model: string;
    logging: boolean;
    X11: boolean;
    custom: string;
    startDelay: number;
    pressDelay: number;
};
export declare class StartOptions {
    model: string;
    logging: boolean;
    X11: boolean;
    custom: string;
    startDelay: number;
    pressDelay: number;
}
export interface Snapshot {
    width: number;
    height: number;
}
export declare class DeviceModel {
    name: string;
    prefix: string;
    path: string;
}
export default class Zemu {
    private startOptions;
    private host;
    private vncPort;
    private transport_url;
    private elfPath;
    private grpcManager;
    private mainMenuSnapshot;
    private vncSession;
    private libElfs;
    private emuContainer;
    private transport;
    constructor(elfPath: string, libElfs?: {
        [key: string]: string;
    }, host?: string, vncPort?: number, transportPort?: number);
    getSession(): any;
    static saveRGBA2Png(rect: {
        width: number;
        height: number;
        data: Buffer;
    }, filename: string): void;
    static LoadPng2RGB(filename: string): PNG.PNGWithMetadata;
    static delay(v: number): void;
    static sleep(ms: number): Promise<unknown>;
    static delayedPromise(p: any, delay: number): Promise<void>;
    static stopAllEmuContainers(): Promise<void>;
    static checkAndPullImage(): Promise<void>;
    static checkElf(model: string, elfPath: string): void;
    start(options: StartOptions): Promise<void>;
    connect(): Promise<void>;
    log(message: string): void;
    connectVNC(): Promise<unknown>;
    startGRPCServer(ip: string, port: number, options?: {}): void;
    stopGRPCServer(): void;
    close(): Promise<void>;
    getTransport(): any;
    getWindowRect(): {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    snapshot(filename?: string): Promise<any>;
    getMainMenuSnapshot(): Promise<null>;
    waitUntilScreenIsNot(screen: any, timeout?: number): Promise<void>;
    compareSnapshotsAndAccept(path: string, testcaseName: string, snapshotCount: number, backClickCount?: number): Promise<boolean>;
    clickLeft(filename?: string): Promise<any>;
    clickRight(filename?: string): Promise<any>;
    clickBoth(filename?: string): Promise<any>;
}
