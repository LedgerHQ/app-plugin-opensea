"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
/** ******************************************************************************
 *  (c) 2020 Zondax GmbH
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 ******************************************************************************* */
var src_1 = __importDefault(require("../src"));
var Resolve = require('path').resolve;
jest.setTimeout(60000);
var DEMO_APP_PATH_S = Resolve('bin/demoAppS.elf');
var DEMO_APP_PATH_X = Resolve('bin/demoAppX.elf');
var APP_SEED = 'equip will roof matter pink blind book anxiety banner elbow sun young';
var ZEMU_OPTIONS_S = {
    X11: true,
    logging: true,
    pressDelay: 350,
    startDelay: 2000,
    model: 'nanos',
    custom: "-s \"" + APP_SEED + "\" "
};
var ZEMU_OPTIONS_X = {
    X11: true,
    logging: true,
    pressDelay: 0,
    startDelay: 3000,
    model: 'nanox',
    custom: "-s \"" + APP_SEED + "\" "
};
test('File-Missing', function () {
    expect(function () {
        new src_1["default"]('it_does_not_exist');
    }).toThrow(/Did you compile/);
});
test('Start&Close-NanoS', function () { return __awaiter(void 0, void 0, void 0, function () {
    var sim;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                sim = new src_1["default"](DEMO_APP_PATH_S);
                expect(sim).not.toBeNull();
                _a.label = 1;
            case 1:
                _a.trys.push([1, , 3, 5]);
                return [4 /*yield*/, sim.start(ZEMU_OPTIONS_S)];
            case 2:
                _a.sent();
                return [3 /*break*/, 5];
            case 3: return [4 /*yield*/, sim.close()];
            case 4:
                _a.sent();
                return [7 /*endfinally*/];
            case 5: return [2 /*return*/];
        }
    });
}); });
test('Start&Close-NanoX', function () { return __awaiter(void 0, void 0, void 0, function () {
    var sim;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                sim = new src_1["default"](DEMO_APP_PATH_X);
                expect(sim).not.toBeNull();
                _a.label = 1;
            case 1:
                _a.trys.push([1, , 3, 5]);
                return [4 /*yield*/, sim.start(ZEMU_OPTIONS_X)];
            case 2:
                _a.sent();
                return [3 /*break*/, 5];
            case 3: return [4 /*yield*/, sim.close()];
            case 4:
                _a.sent();
                return [7 /*endfinally*/];
            case 5: return [2 /*return*/];
        }
    });
}); });
test('Snapshot', function () { return __awaiter(void 0, void 0, void 0, function () {
    var sim, session, snapshot;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                sim = new src_1["default"](DEMO_APP_PATH_S);
                _a.label = 1;
            case 1:
                _a.trys.push([1, , 4, 6]);
                return [4 /*yield*/, sim.start(ZEMU_OPTIONS_S)];
            case 2:
                _a.sent();
                session = sim.getSession();
                expect(session.title).toEqual('LibVNCServer');
                expect(session.width).toEqual(128);
                expect(session.height).toEqual(32);
                return [4 /*yield*/, sim.snapshot()];
            case 3:
                snapshot = _a.sent();
                expect(snapshot.width).toEqual(128);
                expect(snapshot.height).toEqual(32);
                return [3 /*break*/, 6];
            case 4: return [4 /*yield*/, sim.close()];
            case 5:
                _a.sent();
                return [7 /*endfinally*/];
            case 6: return [2 /*return*/];
        }
    });
}); });
test('Basic Control - S', function () { return __awaiter(void 0, void 0, void 0, function () {
    var sim, view0, view1, view2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                sim = new src_1["default"](DEMO_APP_PATH_S);
                _a.label = 1;
            case 1:
                _a.trys.push([1, , 9, 11]);
                return [4 /*yield*/, sim.start(ZEMU_OPTIONS_S)];
            case 2:
                _a.sent();
                return [4 /*yield*/, sim.clickLeft()];
            case 3:
                _a.sent();
                return [4 /*yield*/, sim.clickLeft()];
            case 4:
                _a.sent();
                return [4 /*yield*/, sim.clickLeft()
                    // Move up and down and check screens
                ];
            case 5:
                _a.sent();
                return [4 /*yield*/, sim.snapshot('tests/tmp/00000.png')];
            case 6:
                view0 = _a.sent();
                return [4 /*yield*/, sim.clickRight('tests/tmp/00001.png')];
            case 7:
                view1 = _a.sent();
                return [4 /*yield*/, sim.clickLeft('tests/tmp/00002.png')
                    // compare to check that it went back to the same view
                ];
            case 8:
                view2 = _a.sent();
                // compare to check that it went back to the same view
                expect(view2).toEqual(view0);
                expect(view1).not.toEqual(view0);
                return [3 /*break*/, 11];
            case 9: return [4 /*yield*/, sim.close()];
            case 10:
                _a.sent();
                return [7 /*endfinally*/];
            case 11: return [2 /*return*/];
        }
    });
}); });
test('Basic Control - X', function () { return __awaiter(void 0, void 0, void 0, function () {
    var sim, view0, view1, view2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                sim = new src_1["default"](DEMO_APP_PATH_X);
                _a.label = 1;
            case 1:
                _a.trys.push([1, , 9, 11]);
                return [4 /*yield*/, sim.start(ZEMU_OPTIONS_X)];
            case 2:
                _a.sent();
                return [4 /*yield*/, sim.clickLeft()];
            case 3:
                _a.sent();
                return [4 /*yield*/, sim.clickLeft()];
            case 4:
                _a.sent();
                return [4 /*yield*/, sim.clickLeft()
                    // Move up and down and check screens
                ];
            case 5:
                _a.sent();
                return [4 /*yield*/, sim.snapshot('tests/tmpX/00000.png')];
            case 6:
                view0 = _a.sent();
                return [4 /*yield*/, sim.clickRight('tests/tmpX/00001.png')];
            case 7:
                view1 = _a.sent();
                return [4 /*yield*/, sim.clickLeft('tests/tmpX/00002.png')
                    // compare to check that it went back to the same view
                ];
            case 8:
                view2 = _a.sent();
                // compare to check that it went back to the same view
                expect(view2).toEqual(view0);
                expect(view1).not.toEqual(view0);
                return [3 /*break*/, 11];
            case 9: return [4 /*yield*/, sim.close()];
            case 10:
                _a.sent();
                return [7 /*endfinally*/];
            case 11: return [2 /*return*/];
        }
    });
}); });
test('Load/Compare Snapshots', function () { return __awaiter(void 0, void 0, void 0, function () {
    var image1A, image1B, image2A;
    return __generator(this, function (_a) {
        image1A = src_1["default"].LoadPng2RGB('tests/snapshots/image1A.png');
        image1B = src_1["default"].LoadPng2RGB('tests/snapshots/image1B.png');
        image2A = src_1["default"].LoadPng2RGB('tests/snapshots/image2A.png');
        expect(image1A).toEqual(image1B);
        expect(image1A).not.toEqual(image2A);
        return [2 /*return*/];
    });
}); });
test('Wait for change / timeout', function () { return __awaiter(void 0, void 0, void 0, function () {
    var sim, result;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                sim = new src_1["default"](DEMO_APP_PATH_S);
                _a.label = 1;
            case 1:
                _a.trys.push([1, , 4, 6]);
                return [4 /*yield*/, sim.start(ZEMU_OPTIONS_S)];
            case 2:
                _a.sent();
                result = sim.waitUntilScreenIsNot(sim.getMainMenuSnapshot(), 2000);
                return [4 /*yield*/, expect(result).rejects.toEqual('Timeout waiting for screen to change (2000 ms)')];
            case 3:
                _a.sent();
                return [3 /*break*/, 6];
            case 4: return [4 /*yield*/, sim.close()];
            case 5:
                _a.sent();
                return [7 /*endfinally*/];
            case 6: return [2 /*return*/];
        }
    });
}); });
test('Snapshot and compare', function () { return __awaiter(void 0, void 0, void 0, function () {
    var sim, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                sim = new src_1["default"](DEMO_APP_PATH_S);
                _b.label = 1;
            case 1:
                _b.trys.push([1, , 4, 6]);
                return [4 /*yield*/, sim.start(ZEMU_OPTIONS_S)];
            case 2:
                _b.sent();
                _a = expect;
                return [4 /*yield*/, sim.compareSnapshotsAndAccept('tests', 'compare_test', 1)];
            case 3:
                _a.apply(void 0, [_b.sent()]).toBeTruthy();
                return [3 /*break*/, 6];
            case 4: return [4 /*yield*/, sim.close()];
            case 5:
                _b.sent();
                return [7 /*endfinally*/];
            case 6: return [2 /*return*/];
        }
    });
}); });
test('Snapshot and compare 2', function () { return __awaiter(void 0, void 0, void 0, function () {
    var sim, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                sim = new src_1["default"](DEMO_APP_PATH_S);
                _b.label = 1;
            case 1:
                _b.trys.push([1, , 4, 6]);
                return [4 /*yield*/, sim.start(ZEMU_OPTIONS_S)];
            case 2:
                _b.sent();
                _a = expect;
                return [4 /*yield*/, sim.compareSnapshotsAndAccept('tests', 'compare_test2', 1, 1)];
            case 3:
                _a.apply(void 0, [_b.sent()]).toBeTruthy();
                return [3 /*break*/, 6];
            case 4: return [4 /*yield*/, sim.close()];
            case 5:
                _b.sent();
                return [7 /*endfinally*/];
            case 6: return [2 /*return*/];
        }
    });
}); });
// test('Load and run a library', async () => {
//   const LITECOIN_PATH = Resolve('bin/litecoin.elf')
//   const BITCOIN_LIB = { Bitcoin: Resolve('bin/bitcoin.elf') }
//   const sim = new Zemu(LITECOIN_PATH, BITCOIN_LIB)
//   try {
//     await sim.start(ZEMU_OPTIONS_S)
//
//     // If we can see the main screen, then the library has been loaded with success
//     await sim.snapshot('tests/tmp/libWelcome.png')
//     const testLibWelcome = Zemu.LoadPng2RGB('tests/tmp/libWelcome.png')
//     const goldenLibWelcome = Zemu.LoadPng2RGB('tests/snapshots/libWelcome.png')
//     expect(testLibWelcome).toEqual(goldenLibWelcome)
//   } finally {
//     await sim.close()
//   }
// })
test('GRPC Server start-stop', function () { return __awaiter(void 0, void 0, void 0, function () {
    var sim;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                sim = new src_1["default"](DEMO_APP_PATH_S);
                return [4 /*yield*/, sim.start(ZEMU_OPTIONS_S)];
            case 1:
                _a.sent();
                sim.startGRPCServer('localhost', 3002);
                return [4 /*yield*/, src_1["default"].sleep(3000)];
            case 2:
                _a.sent();
                return [4 /*yield*/, sim.close()];
            case 3:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); });
